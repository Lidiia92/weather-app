{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","temp","Math","round","kelvinToFahrenheit","parseFloat","weather","temperature","city","country","humidity","description","error","App","state","undefined","_callee","event","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","value","fetch","concat","sent","json","console","log","_this","setState","main","sys","stop","components_Titles","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09c1e276.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../App.css';\r\n\r\nclass Titles extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className=\"title-container__title\">Weather Finder</h1>\r\n                <p className=\"title-container__subtitle\">Find out temperature, conditions and more...</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Titles;","import React from \"react\";\r\n\r\n\r\nclass Form extends React.Component {\r\n    render() {\r\n        return(\r\n            <form onSubmit={this.props.getWeather}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"City...\"/>\r\n                <input type=\"text\" name=\"country\" placeholder=\"Country...\"/>\r\n                <button>Get Weather</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport kelvinToFahrenheit from 'kelvin-to-fahrenheit';\r\nimport '../App.css';\r\n\r\n\r\nclass Weather extends React.Component {\r\n    render() {\r\n        const temp = Math.round(kelvinToFahrenheit(parseFloat(this.props.weather.temperature)));\r\n        return(\r\n            <div className=\"weather__info\">\r\n                {this.props.weather.city && this.props.weather.country && <p className=\"weather__key\">Location: <span className=\"weather__value\">{this.props.weather.city}, {this.props.weather.country}</span></p>}\r\n                {this.props.weather.temperature && <p className=\"weather__key\">Temperature: <span className=\"weather__value\">{temp}</span></p>}\r\n                {this.props.weather.humidity && <p className=\"weather__key\">Humidity: <span className=\"weather__value\">{this.props.weather.humidity}</span></p>}\r\n                {this.props.weather.description && <p className=\"weather__key\">Conditions: <span className=\"weather__value\">{this.props.weather.description}</span></p>}\r\n                {this.props.weather.error && <p className=\"weather__key\"><span>{this.props.weather.error}</span></p>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/Titles.js\";\nimport Form from \"./components/Form.js\";\nimport Weather from \"./components/Weather.js\";\n\nconst api_key = \"964cb9513e0ee480a2f32f64a4d6ce9f\";\n\nclass App extends React.Component {\n\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined, \n    humidity: undefined,\n    description: undefined,\n    error: undefined\n\n  }\n\n  getWeather = async (event) => {\n    event.preventDefault();\n\n    const city = event.target.elements.city.value;\n    const country = event.target.elements.country.value;\n    \n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=964cb9513e0ee480a2f32f64a4d6ce9f`);\n\n    const data = await api_call.json();\n\n    if(city && country) {\n      console.log(data);\n      \n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n  \n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined, \n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter the values\"\n      });\n    }\n  }\n\n  render(){\n    return (\n      <div>\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Titles />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form getWeather={this.getWeather} />\n                <Weather \n                  weather={this.state} \n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}